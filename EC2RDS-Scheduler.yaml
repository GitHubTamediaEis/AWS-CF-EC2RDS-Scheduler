AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'EC2/RDS Scheduler: This template deploys a lambda function that automatically starts and stops EC2/RDS instances based on tags'
Parameters:
  Schedule:
    Description: Interval to execute the lambda function
    Type: String
    Default: 5minutes
    AllowedValues:
    - 1minute
    - 5minutes
    - 15minutes
    - 30minutes
    - 1hour
  DefaultStartTime:
    Description: Default Start Time (DefaultTimeZone, utc by default, 24-hour format, enclose in '')
    Type: String
    Default: "'0800'"
  DefaultStopTime:
    Description: Default Start Time (DefaultTimeZone, utc by default, 24-hour format, enclose in '')
    Type: String
    Default: "'1800'"
  DefaultDaysActive:
    Description: Enter all, weekdays, or any combination of days (mon, tue,
      wed, thu, fri, sat, or sun) comma separated
    Type: String
    Default: "mon,tue,wed,thu,fri"
  DefaultTimeZone:
    Description: Enter utc, Australia/Sydney, Etc/GMT+10, or any timezone supported
      by pytz
    Type: String
    Default: Europe/Zurich
  CustomTagName:
    Description: Tag name to use on EC2 instances
    Type: String
    Default: scheduler:ec2-startstop
  CustomRDSTagName:
    Description: Tag name to use on RDS instances
    Type: String
    Default: scheduler:rds-startstop
  CloudWatchMetrics:
    Description: Create CloudWatch Custom Metric
    Type: String
    Default: Disabled
    AllowedValues:
    - Enabled
    - Disabled
  Regions:
    Description: AWS regions to query, all means all AWS regions, or separate multiple
      regions by space
    Type: String
    Default: eu-west-1
  RDSSupport:
    Description: Support RDS instances
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
  ASGSupport:
    Description: Support handling of Autoscaling Groups (The ASGs "Min-Value" must allow for the instances to be set to standby. Ideally the "Min-Value" should be set to 0)
    Type: String
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
Mappings:
  Schedule:
    Time:
      1minute: cron(0/1 * * * ? *)
      5minutes: cron(0/5 * * * ? *)
      15minutes: cron(0/15 * * * ? *)
      30minutes: cron(0/30 * * * ? *)
      1hour: cron(0 * * * ? *)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Tag Configuration
      Parameters:
      - CustomTagName
      - CustomRDSTagName
    - Label:
        default: CloudWatch Event Schedule Configuration
      Parameters:
      - Schedule
    - Label:
        default: Default Value Configuration
      Parameters:
      - DefaultStartTime
      - DefaultStopTime
      - DefaultDaysActive
      - DefaultTimeZone
    - Label:
        default: CloudWatch Custom Metric
      Parameters:
      - CloudWatchMetrics
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ec2SchedulerPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
            - ec2:StartInstances
            - ec2:StopInstances
            - ec2:DescribeRegions
            - ec2:DescribeInstances
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:DescribeAutoScalingInstances
            - autoscaling:EnterStandby
            - autoscaling:ExitStandby
            - rds:DescribeDBInstances
            - rds:StartDBInstance
            - rds:StopDBInstance
            - rds:ListTagsForResource
            - cloudwatch:PutMetricData
            - cloudformation:DescribeStacks
            - kms:CreateGrant
            Resource: "*"
  Ec2RdsScheduler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ec2rds-scheduler.lambda_handler
      Timeout: 300
      MemorySize: 256
      Runtime:  python3.7
      CodeUri: ec2rds-scheduler.zip
      Role: !GetAtt Role.Arn
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: !FindInMap [ Schedule, Time, !Ref Schedule ]
            Input: !Sub
              '{
              "Regions":"${Regions}",
              "CustomTagName":"${CustomTagName}",
              "CustomRDSTagName":"${CustomRDSTagName}",
              "DefaultStartTime":"${DefaultStartTime}",
              "DefaultStopTime":"${DefaultStopTime}",
              "DefaultTimeZone":"${DefaultTimeZone}",
              "CloudWatchMetrics":"${CloudWatchMetrics}",
              "DefaultDaysActive":"${DefaultDaysActive}",
              "RDSSupport":"${RDSSupport}",
              "ASGSupport":"${ASGSupport}",
              "Schedule":"${Schedule}"
              }'
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${Ec2RdsScheduler}
      RetentionInDays: 30
